generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Admin {
  id            String         @id @default(cuid())
  fullName      String
  email         String         @unique
  password      String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]

  @@map("admins")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  adminId   String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId], map: "refresh_tokens_adminId_fkey")
  @@map("refresh_tokens")
}

model Arbitrator {
  id                String   @id @default(cuid())
  fullName          String
  profilePicture    String?  // URL to profile picture
  location          String
  languages         String   // JSON string of languages
  specializationAreas String // JSON string of specialization areas
  yearsOfExperience Int      @default(0) // Years of experience as an arbitrator
  description       String   @db.Text
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  arbitrationRequests ArbitrationRequest[]

  @@map("arbitrators")
}

model ArbitrationRequest {
  id                String   @id @default(cuid())
  fullName          String
  phoneNumber       String
  emailAddress      String?
  location          String?
  preferredLanguages String? // JSON string of preferred languages
  typeOfDispute     String
  disputeSummary    String   @db.Text
  preferredArbitratorId String? // Optional reference to preferred arbitrator
  status            RequestStatus @default(PENDING)
  adminNotes        String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  preferredArbitrator Arbitrator? @relation(fields: [preferredArbitratorId], references: [id])

  @@map("arbitration_requests")
}

enum RequestStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Client {
  id               Int       @id @default(autoincrement())
  fullName         String
  caseNumber       String    @default("N/A")
  status           String    @default("Pending")
  phoneNumber      String
  appointmentDate  DateTime?
  assignedLawyer   String?
  court            String?
  createdBy        String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  folders Folder[]
  notes   Note[]

  @@map("clients")
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  type      String   @default("custom") // 'default' or 'custom'
  clientId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  files  File[]

  @@map("folders")
}

model File {
  id          Int      @id @default(autoincrement())
  fileName    String
  description String?
  filePath    String
  fileSize    Int?     // in bytes
  mimeType    String?
  folderId    Int
  uploadedAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  @@map("files")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  clientId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("notes")
}